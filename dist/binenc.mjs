var u=function(t){let i=0n;for(;t>0;)t=t>>1n,i++;return i-1n},h=class{bits=7;#t=0;#i=0n;decode(t){if(this.bits>7&&(this.bits=7),t<0)throw RangeError("Cannot be negative values");let i=(1<<this.bits)-1;if(this.#t=this.#t<<this.bits,t>=i)return this.#t+=t&i,null;{let e=this.#t+t;return this.#t=0,e}}decodeBint(t){if(this.bits>7&&(this.bits=7),t<0)throw RangeError("Cannot be negative values");let i=BigInt(this.bits),e=BigInt(t),s=(1n<<i)-1n;if(this.#i=this.#i<<i,e>=s)return this.#i+=e&s,null;{let n=this.#i+e;return this.#i=0n,n}}constructor(t){this.bits=t||7}},b=class{bits=7;encode(t){if(this.bits>7&&(this.bits=7),t<0)throw RangeError("Cannot be negative values");let i=(1<<this.bits)-1,e=new Uint8Array(Math.floor(Math.log2(t)/this.bits+1));for(let s=0;s<e.length;s++){let n=e.length-1-s,r=i+1;s==0&&(r=0),e[n]=r+(t>>s*this.bits&i)}return e}encodeBint(t){if(this.bits>7&&(this.bits=7),t<0n)throw RangeError("Cannot be negative values");let i=BigInt(this.bits),e=(1n<<i)-1n,s=Number(e),n=u(t)/i+1n,r=new Uint8Array(Number(n));for(let l=0n;l<n;l++){let a=Number(n-1n-l),o=s+1;l==0&&(o=0),r[a]=o+Number(t>>l*i&e)}return r}constructor(t){this.bits=t||7}};var g=new Uint8Array([240,126,127,4,64]),w=new Uint8Array([247]),m=class{#t=new b(6);#i=new h(6);pool=[];finalize(){let t=[];return delete this.pool,this.pool=[],new Blob(t)}constructor(){}};export{m as DitzyEncoder};
