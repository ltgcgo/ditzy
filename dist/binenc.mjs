var l=function(t){let s=0n;for(;t>0;)t=t>>1n,s++;return s-1n};var c=class{bits=7;encode(t){if(this.bits>7&&(this.bits=7),t<0)throw RangeError("Cannot be negative values");let s=(1<<this.bits)-1,i=new Uint8Array(Math.max(Math.floor(Math.log2(t)/this.bits+1),1));for(let e=0;e<i.length;e++){let n=i.length-1-e,h=s+1;e==0&&(h=0),i[n]=h+(t>>e*this.bits&s)}return i}encodeBint(t){if(this.bits>7&&(this.bits=7),t<0n)throw RangeError("Cannot be negative values");let s=BigInt(this.bits),i=(1n<<s)-1n,e=Number(i),n=l(t)/s+1n,h=new Uint8Array(Number(n));for(let r=0n;r<n;r++){let a=Number(n-1n-r),d=e+1;r==0&&(d=0),h[a]=d+Number(t>>r*s&i)}return h}constructor(t){this.bits=t||7}};var u=new Uint8Array([240,126,127,4,64]),p=new Uint8Array([247]),b=(1n<<48n)-1n,o=new TextEncoder,w=class{#t=new c(6);#i=new BigUint64Array(1);timeout=3e4;pool=[];getRandom(){return crypto.getRandomValues(this.#i)[0]&b}cidValid(t){if(!t&&t!=0n||t.constructor!=BigInt)throw new Error("Invalid connection ID.")}connOpen(){let t=this.getRandom();return this.pool.push({cmd:0,cid:t,mid:0,cdv:this.timeout}),t}connClose(t,s="",i=0){this.cidValid(t),this.pool.push({cmd:1,cid:t,mid:i,pdt:s})}connTest(t,s=0,i=0){this.cidValid(t),this.pool.push({cmd:2,cid:t,mid:i,cdv:s})}dataJump(t,s,i=0){this.cidValid(t),this.pool.push({cmd:3,cid:t,mid:i,pdt:s})}dataSend(t,s,i=0){this.cidValid(t),this.pool.push({cmd:4,cid:t,mid:i,pdt:s})}dataAck(t,s){if(this.cidValid(t),!s)throw new Error("Invalid message ID");this.pool.push({cmd:5,cid:t,mid:s,cdv:0})}featOn(t,s=""){this.cidValid(t),this.pool.push({cmd:6,cid:t,mid:0,pdt:s})}featOff(t,s=""){this.cidValid(t),this.pool.push({cmd:7,cid:t,mid:0,pdt:s})}validate(t){if(t.buffer)return t;switch(t.constructor){case ArrayBuffer:return t;case String:return o.encode(t);case Number:return this.#t.encode(t);case BigInt:return this.#t.encodeBint(t);default:return o.encode(JSON.stringify(t))}}finalize(){let t=[u],s={};return this.pool.forEach(i=>{let e=new Uint8Array(1);switch(e[0]=i.cmd,i.cmd){case 0:{s[i.cid]=1,t.push(e),t.push(this.#t.encodeBint(i.cid)),t.push(this.#t.encode(i.cdv)),t.push(this.#t.encode(i.mid));break}case 1:{i.mid||(i.mid=s[i.cid]),delete s[i.cid],t.push(e),t.push(this.#t.encodeBint(i.cid)),i.pdt=this.validate(i.pdt),t.push(this.#t.encode(i.pdt.length)),t.push(this.#t.encode(i.mid));break}case 2:case 5:{t.push(e),t.push(this.#t.encodeBint(i.cid)),t.push(this.#t.encode(i.cdv)),t.push(this.#t.encode(i.mid));break}case 3:case 4:{i.mid?s[i.cid]=i.mid:i.mid=s[i.cid],t.push(e),t.push(this.#t.encodeBint(i.cid)),i.pdt=this.validate(i.pdt),t.push(this.#t.encode(i.pdt.length)),t.push(this.#t.encode(i.mid)),s[i.cid]++;break}case 6:case 7:{t.push(e),t.push(this.#t.encodeBint(i.cid)),i.pdt=this.validate(i.pdt),t.push(this.#t.encode(i.pdt.length)),t.push(this.#t.encode(i.mid));break}}}),t.push(p),this.pool.forEach(i=>{switch(i.cmd){case 1:case 3:case 4:case 6:case 7:{t.push(i.pdt);break}}}),delete this.pool,this.pool=[],new Blob(t)}constructor(){}};export{w as DitzyEncoder};
