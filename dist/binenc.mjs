var b=function(t){let e=0n;for(;t>0;)t=t>>1n,e++;return e-1n};var h=class{bits=7;encode(t){if(this.bits>7&&(this.bits=7),t<0)throw RangeError("Cannot be negative values");let e=(1<<this.bits)-1,i=new Uint8Array(Math.max(Math.floor(Math.log2(t)/this.bits+1),1));for(let r=0;r<i.length;r++){let n=i.length-1-r,s=e+1;r==0&&(s=0),i[n]=s+(t>>r*this.bits&e)}return i}encodeBint(t){if(this.bits>7&&(this.bits=7),t<0n)throw RangeError("Cannot be negative values");let e=BigInt(this.bits),i=(1n<<e)-1n,r=Number(i),n=b(t)/e+1n,s=new Uint8Array(Number(n));for(let o=0n;o<n;o++){let u=Number(n-1n-o),l=r+1;o==0&&(l=0),s[u]=l+Number(t>>o*e&i)}return s}constructor(t){this.bits=t||7}};var c=(1n<<48n)-1n,a=new TextEncoder,p=class{#t=new h(6);#e=new BigUint64Array(1);timeout=15e3;pool=[];getRandom(){return crypto.getRandomValues(this.#e)[0]&c}cidValid(t){if(!t&&t!=0n||t.constructor!=BigInt||t>=c)throw new Error("Invalid connection ID.")}connOpen(){let t=this.getRandom();return this.pool.push({cmd:1,conn:t,frame:0,data:`{"to":${this.timeout}}`}),t}connClose(t){this.cidValid(t),this.pool.push({cmd:0,conn:t,frame})}validate(t){if(t.buffer)return t;switch(t.constructor){case ArrayBuffer:return t;case String:return a.encode(t);case Number:return this.#t.encode(t);case BigInt:return this.#t.encodeBint(t);default:return a.encode(JSON.stringify(t))}}finalize(){let t=[],e={};return this.pool.forEach(i=>{let r=new Uint8Array(1);r[0]=i.cmd}),delete this.pool,this.pool=[],new Blob(t)}constructor(){}},v=class extends EventTarget{decode(t){}constructor(){super()}};export{v as DitzyDecoder,p as DitzyEncoder};
